---
layout: post
title:      "Astrology Gem Project"
date:       2018-02-03 07:01:31 +0000
permalink:  astrology_gem_project
---


Most intellectually satisfying things come with hard work, and probably even struggle.  I wrote a little blog post previously about the beginning process of my gem project and the struggles I had just getting everything set up before the coding even started.  

My process was long, about 5 days, and I worked a tremendous amount of time. I felt frustrated, excited, satisfied and accomplished and it was one crazy roller coaster this week. Ending it on a high note I am excited to do a review of my process, how I did things, how they went (what went well and what didn't), and what I learned.

## Pre-Work
I started my project by watching Avi's walk through video.  I thought it would be a good idea because as I watched even just the first 10 minutes I knew I was going to be doing a few things I had never done before.  Most of our previous lab projects had been set up and ready to go. Changing executable permissions was a new thing for me and following along with his video was helpful in the beginning.

I researched a ton.  I really wanted to do my project on Travelzoo's Top 20 travel deals page but they don't allow scraping.  Then I sought out to do one on mortgage rates - comparing banks, their rates and displaying payment information. All the sites I could find also did not allow scraping.  I always laugh about anyone who talks about weather because it's a yawn, so those easy static pages just weren't appealing to me.  I didn't want to build it around local stuff because I live in the middle of the country, in St Louis, where literally nobody would ever want to come.  I'm one of those girls who does believe in horoscopes though and I thought that idea would appeal to other people as well. So I looked up all the regular astrology sites I go to regularly, and they didn't allow scraping. Getting a bit creative/resourceful I thought about the types of websites I saw that allowed scraping and ones that may have horoscope info on them.  I realized that a newspaper site was the way to go. I literally just googled newspaper sites that have horoscopes and went through about 5 pages of google listings.  I compared about the CSS selectors were named and how the sites were set up. I compared the details that were provided by the newspapers and tried to find one that was giving the most information for the user.  I landed on the Kansas City Star website and I realized it was the prefect option.

## Phase I
I had set up my environment, all the requirements and executable permissions while I was watching Avi's video.  I did run into some hiccups because the command `chmod +x  ./bin/horoscope` was not working (the snippet that was specific to my personal project). I kept getting an error that the change was not permitted. I googled so much information on this, tried at least 20 different combinations of changes and all were not permitted. Finally I got to talk to a tech coach and we figured out that the issue was because I'm using Atom with the Learn IDE 2.5.  I am sticking with the 2.5 because I didn't like the IDE 3.  I missed the file tree. I like being able to go away and return to my computer and everything is there without adding extra layers to my work. So although I get ahead with my code that way, it added additional layers of complexity since certain commands weren't working, even aside from the chmod, because of the bugs in the older version.  This whole process of getting set up and writing out a basic foundation for my gem took about an entire day.  It was frustrating because I had been blowing through the lessons and labs doing about 10 total lessons/labs per day, and now I was stuck on just this piece for an entire day.  I felt like I really missed some major information and didn't feel equipt to handle what I was doing. 

## Phase II
Once I got over these hurdles, I was on my way to coding.  I had set up my files like Avi did in his video. I had a cli class file and an astrology class file.  The astrology file included all the information about the horoscope instances that were being created, along with the scraper methods.  The CLI was just like any other CLI.  At this point, the CLI functioned with the "fake" suedo code that I had written in to make sure the flow of the CLI worked the way I wanted.  I started writing the code for my astrology file.  I didn't have any issues with my scraper method, that topic was more intuitive for me based on my blog building experience.  (As a preface to that, I started a blog back in July 2017 and purchased a theme from a woman.  There was so much I wanted to change and I spent months working on the blog to help make it look the way I wanted. Even then, some of the functionality I wanted didn't work because she didn't have particular functional tools built into it.  At that point was when I decided I wanted to get into coding for a living).

So scraping just is a no brainer for me. Each/do methods also are pretty fluid for me. We've done so many during this course so I wasn't hung up on any of that.  I started getting myself confused when I was trying to have the information talk to each other. I was looking back at my other projects and I realized we always had a scraper page.  I realized I was getting confused because I wasn't quite sure where to put everything when I only had one file for the scraper and astrology instance and class methods.  

During this phase I also thought it was important to have an initialize method. It was all getting very chaotic. I was moving code around all over, commenting out code, and the drama going on my page was making my head spin.  I had duplicated code in places that were all commented out and then I didn't know which place it really should go.  When I was doing this as well, my CLI program code was breaking.  I was watching Avi's video and everything he was doing was functioning the way he wanted but I was following the same steps and I kept running into different errors.  Uninitialized errors, method errors, and the returns were not as I expected.  I could see that my scraper was actually working but something was getting lost in the mix.  I attended an online office hours for the project and the tech coach recommended having the scraper file too.  I started looking back at my old labs and realized I was getting confused because I was trying to do something in a different way than my I originally learned, and also different than how my brain functions best.  I like keeping everything separate and neat to help with flow and understanding and I know other devs will appreciate it later down the road. As a math teacher, I learned that it didn't matter how my students got to answer, as long as the steps they took made logical sense.  They didn't have to do their problems exactly like I would solve them because it's all about logic, just like development.  We have all these Ruby tools, syntax options, and many of them even do the same thing like `.map` and `.collect`.  How we choose to write our code, as long as it is in good convention, is really up to us.

## Phase III
As soon as I realized I wanted to split up everything into the Astrology, CLI and Scraper classes, it was like something just unfolded and clicked.  Shifting things around was pretty easy because they fell nicely into place.  I added a self.all method and save method in my astrology class.  I decided to add the save method because my scraper method in the scraper class was not returning initializing the instances like I was trying to do. The save method was a simple fix.  I also worked out an issue I had determining how I was going to save the page headline, and instead of saving it as anything in particular in my scraper method, I decided to add it as the return of my scraper method, which could then be called on when needed.

I set up a 1-1 with a tech coach, Kevin, and it was so helpful.  We talked about the things that had come up in my old code and talked through why I was getting the errors I was getting.  I simplified the code I had while doing my screen record for the 30 minute coding session requirement. Around the 30 minute mark I ran into an error.  I combed through my code over and over, for 20 minutes and at that point it was about 2 am. My eyes hurt and my dog realized I was still awake and wanted to go out on a walk again in 5 degree weather! I needed to stop for the night but I was determined to figure out the problem.  My screen recording was over by the time I figured it out but I did figure it out. My final error I dealt with came down to the fact that when I added in my scraper class, I forgot to add the requirement to the environment. Once I realized that, my code worked perfectly as planned.

## Phase IV
Now that my program was working I moved onto changing things around in the CLI class.  I didn't like the way my menu was set up. I wasn't thrilled about how my outputs were printing out. I moved things around strictly based on aesthetics.  I spent a ton of time googling different formatting techniques, hours and hours on this.  Then I had a meeting with a learning instructor and she gave me great advice, "something done is better than perfect". So that was that for me! I had one last thing I hadn't figured out but all my requirements were met. It was simply a personal want, but not a need in terms of making the program run or meeting requirements. The outputs looked good and overall, I was really happy to put this baby to rest.... until my review.

## How it works
Alrightttty .... So once you execute my app, a lot of behind the scenes work starts going on.  Right off the bat, I call my scraper method and behind the scenes I set that equal to a headline because the actual return from the scraper method was the headline. I had a hard time figuring out how I was going to save that piece of information and that was perfect.  Okay, so once it scrapes the info, it is saved to the `@@all` array. and the `self.all` method gives the user the ability to be able to actually see everything that was just done because it is reading everything that was saved. Now that all that occurred behind the scenes. All of that happens before the user even sees the initial list prompt on the screen.  The CLI prints out a prompt for the user to select a number 1-12 that corresponds to their horoscope.  Since some people may not be into astrology, I didn't want to assume that everyone knows their astrological sign so I also had scraped the birthdate ranges and included that in the list part of the project.

The user can then make their selection and details about their daily horoscope is displayed.  A header showing 
the current date, the astrological sign, lucky number, financial outlook and partner compatability sign.  This detail view also gives the user the ability to go back to the list or exit the program.  When the user exits the progam, a goodbye method is called and tells them to come back again for their daily horoscope.

### Struggles
1. Setting up the environment (using commands that would work for anyone else except me).
2. Figuring out how I wanted to organize my methods outside of the CLI.
3. Determining how to fix errors that I had never seen before.

### Victories
1. Overcoming the obstacles I faced above.
2. Realizing I understood the code much more than I thought.
3. Helping others, in turn, helped me learn even more.

### Final Thoughts
Overall I am pretty happy with my project.  I think I will probably make tweaks to it later on in terms of display. I look forward to seeing what the reviewer thinks and their feedback on how it could be improved.
